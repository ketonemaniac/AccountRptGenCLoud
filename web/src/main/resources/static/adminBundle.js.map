{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "app/admin.js",
    "app/fileUpload.js",
    "app/paramUpload.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "// var Spinner = require('spin');\r\nvar FileUpload = require('./fileUpload.js');\r\nvar ParamUpload = require('./paramUpload.js');\r\n\r\n+ function ($) {\r\n    'use strict';\r\n\r\n    // MAIN STARTUP FLOW\r\n    // ==================\r\n    $(document).ready(function () {\r\n\r\n        FileUpload.init(\"/admin\", function(data) { return \"File upload success. New Template: \" + data.filename; });\r\n        ParamUpload.init(\"/admin\");\r\n        \r\n        // populate attributes\r\n        $.ajax({\r\n            url: '/admin/getParam',\r\n            type: 'GET',\r\n            contentType: \"application/json\",\r\n            success: function (data) {\r\n                $(\"#email\").val(data[\"mail.sendto\"]);\r\n                $(\"#currentFile\").val(data[\"xlsx.template.name\"]);\r\n            },\r\n            error: function (jqXHR, textStatus, errorThrown) {\r\n                $.notify({\r\n                    message: \"Parameter settings loading failed. Debug info=\" + errorThrown\r\n                }, {\r\n                        type: 'danger'\r\n                    });\r\n            }\r\n        });\r\n\r\n\r\n    });\r\n\r\n}(jQuery);",
    "\"use strict\";\r\n\r\n// UPLOAD CLASS DEFINITION\r\n// ======================\r\nvar dropZone = document.getElementById('drop-zone');\r\nvar uploadForm = document.getElementById('js-upload-form');\r\nvar prefix = \"\";\r\nvar msg = \"\";\r\nvar filename = \"\";\r\n\r\nvar startUpload = function (files) {\r\n\r\n    // https://coligo.io/building-ajax-file-uploader-with-node/\r\n\r\n    if (files.length > 0) {\r\n        // One or more files selected, process the file upload\r\n\r\n        // create a FormData object which will be sent as the data payload in the\r\n        // AJAX request\r\n        var formData = new FormData();\r\n\r\n        // loop through all the selected files\r\n        for (var i = 0; i < files.length; i++) {\r\n            var file = files[i];\r\n\r\n            // add the files to formData object for the data payload\r\n            formData.append('file', file, file.name);\r\n            var spinHandle = loadingOverlay().activate();\r\n            $.ajax({\r\n                url: prefix + '/uploadFile',\r\n                type: 'POST',\r\n                data: formData,\r\n                processData: false,\r\n                contentType: false,\r\n                success: function (data) {\r\n                    loadingOverlay().cancel(spinHandle);\r\n                    $.notify({\r\n                        message: msg(data)\r\n                    }, {\r\n                            type: 'success'\r\n                        });\r\n        \r\n                },\r\n                error: function (jqXHR, textStatus, errorThrown) {\r\n                    console.log('error');\r\n                    loadingOverlay().cancel(spinHandle);\r\n                    $.notify({\r\n                        message: \"Operation failed. Debug info=\" + errorThrown\r\n                    }, {\r\n                            type: 'danger'\r\n                        });\r\n                }\r\n                /*xhr: function() {\r\n                    // create an XMLHttpRequest\r\n                    var xhr = new XMLHttpRequest();\r\n \r\n                    // listen to the 'progress' event\r\n                    xhr.upload.addEventListener('progress', function(evt) {\r\n \r\n                    if (evt.lengthComputable) {\r\n                        // calculate the percentage of upload completed\r\n                        var percentComplete = evt.loaded / evt.total;\r\n                        percentComplete = parseInt(percentComplete * 100);\r\n \r\n                        // update the Bootstrap progress bar with the new percentage\r\n                        $('.progress-bar').text(percentComplete + '%');\r\n                        $('.progress-bar').width(percentComplete + '%');\r\n \r\n                        // once the upload reaches 100%, set the progress bar text to done\r\n                        if (percentComplete === 100) {\r\n                            $('.progress-bar').html('Done');\r\n                            // spinner.spin();\r\n                            $(\".overlay\").fadeIn().append(spinner.el);\r\n                            // new Spinner({color:'#999', lines: 12}).spin($(\".overlay\"));\r\n \r\n                        }\r\n \r\n                    }\r\n \r\n                    }, false);\r\n \r\n                    return xhr;\r\n                }*/\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nvar startDownload = function (filename) {\r\n    // ajax doesn't handle file downloads elegantly\r\n    var req = new XMLHttpRequest();\r\n    req.open(\"POST\", prefix + \"/downloadFile\", true);\r\n    req.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    req.responseType = \"blob\";\r\n    req.onreadystatechange = function () {\r\n        if (req.readyState === 4 && req.status === 200) {\r\n            // test for IE\r\n            if (typeof window.navigator.msSaveBlob === 'function') {\r\n                window.navigator.msSaveBlob(req.response, \"PdfName-\" + new Date().getTime() + \".pdf\");\r\n            } else {\r\n                var blob = req.response;\r\n                var link = document.createElement('a');\r\n                link.href = window.URL.createObjectURL(blob);\r\n                link.download = filename;\r\n                // append the link to the document body\r\n                document.body.appendChild(link);\r\n                link.click();\r\n            }\r\n        }\r\n    };\r\n    req.send(JSON.stringify({ \"filename\": filename }));\r\n}\r\n\r\nvar init = function (path, msgFn) {\r\n\r\n    prefix = path;\r\n    msg = msgFn;\r\n\r\n    // EVENT LISTENERS\r\n    // ===============\r\n    uploadForm.addEventListener('submit', function (f) {\r\n        var uploadFiles = document.getElementById('js-upload-files').files;\r\n        f.preventDefault()\r\n        startUpload(uploadFiles)\r\n    })\r\n\r\n    dropZone.ondrop = function (f) {\r\n        // prevent brower from really opening the file\r\n        f.preventDefault();\r\n        this.className = 'upload-drop-zone';\r\n        startUpload(f.dataTransfer.files)\r\n    }\r\n\r\n    dropZone.ondragover = function () {\r\n        this.className = 'upload-drop-zone drop';   // change css\r\n        return false;\r\n    }\r\n\r\n    dropZone.ondragleave = function () {\r\n        this.className = 'upload-drop-zone';\r\n        return false;\r\n    }\r\n\r\n    // flieselect event definition\r\n    // put filename into text under input-group\r\n    $(':file').on('fileselect', function (event, numFiles, label) {\r\n        var input = $(this).parents('.input-group').find(':text'),\r\n            log = numFiles > 1 ? numFiles + ' files selected' : label;\r\n\r\n        if (input.length) {\r\n            input.val(log);\r\n        } else {\r\n            if (log) alert(log);\r\n        }\r\n    });\r\n    \r\n    // We can attach the `fileselect` event to all file inputs on the page\r\n    $(document).on('change', ':file', function () {\r\n        var input = $(this),\r\n            numFiles = input.get(0).files ? input.get(0).files.length : 1,\r\n            label = input.val().replace(/\\\\/g, '/').replace(/.*\\//, '');\r\n        input.trigger('fileselect', [numFiles, label]);\r\n    });\r\n\r\n\r\n    $(document).on('click', '#genHistoryTable .dlbtn', function () {\r\n        startDownload($(this).closest(\"tr\").children('td:nth-child(3)').text());\r\n    });\r\n}\r\n\r\nmodule.exports.init = init;\r\n",
    "\"use strict\";\r\n\r\n// UPLOAD CLASS DEFINITION\r\n// ======================\r\nvar uploadForm = document.getElementById('js-param-form');\r\nvar prefix = \"\";\r\n\r\nvar startUpload = function (email) {\r\n\r\n    var spinHandle = loadingOverlay().activate();\r\n    $.ajax({\r\n        url: prefix + '/saveParam',\r\n        type: 'POST',\r\n        data: '{ \"mail.sendto\" : \"' + email + '\" }',\r\n        contentType: \"application/json\",\r\n        success: function (data) {\r\n            loadingOverlay().cancel(spinHandle);\r\n            $.notify({\r\n                message: 'Successfully updated parameters to server'\r\n            }, {\r\n                    type: 'success'\r\n                });\r\n            $(\"#email\").text(email);\r\n        },\r\n        error: function (jqXHR, textStatus, errorThrown) {\r\n            loadingOverlay().cancel(spinHandle);\r\n            $.notify({\r\n                message: 'Failed to save parameters'\r\n            }, {\r\n                    type: 'danger'\r\n                });\r\n        }\r\n    });\r\n}\r\n\r\nvar init = function (path) {\r\n\r\n    prefix = path;\r\n\r\n    // EVENT LISTENERS\r\n    // ===============\r\n    uploadForm.addEventListener('submit', function (f) {\r\n        var email = $('#email').val();\r\n        f.preventDefault()\r\n        startUpload(email)\r\n    })\r\n\r\n}\r\n\r\nmodule.exports.init = init;\r\n"
  ]
}